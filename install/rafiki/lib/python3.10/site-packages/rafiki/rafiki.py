import yaml
import math
import csv
import os
import inspect
import time
import numpy as np
from rocketcea.cea_obj_w_units import CEA_Obj
from rocketcea import blends
from datetime import datetime
from rafiki.data_checker import DataChecker

# For a detailed explanation of the engine sizing process, with sample calculations, please refer
# to the Athena article here: http://athena.leedsrocketry.co.uk/doku.php?id=engine_sizing
class Rafiki:
    def __init__(self, rootdir, cfg, dataPath=None, test_run=False, param_study_mode=False):
        # IMPORTANT: do not remove following code, will break code
        self.print_monkey()
        self.print_logo()
        time.sleep(2)
        
        # constants
        self.g = 9.81 # acceleration due to graivity [m/s^2]
        self.R_0 = 8314 # universal gas constant [J/kmolK]
        
        # load input parameters
        self.rootdir = rootdir
        self.params = self.load_YAML(cfg)
        
        # if in param study mode, setup input parameters based on study parameter
        if param_study_mode != False:
            self.setup_study_params()
        
        # blend fuels and oxidisers
        self.blend_props()
        
        # store design parameter arrays
        self.project_name = self.params["project_name"]
        self.design_names = self.params["design_parameters"]["design_name"]
        self.fuel = self.params["design_parameters"]["fuel"]
        self.fuel_wts = self.params["design_parameters"]["fuel_wts"]
        for i in range(len(self.fuel_wts)):
            self.fuel_wts[i] = self.fuel_wts[i][0]
        self.oxidiser = self.params["design_parameters"]["oxidiser"]
        self.oxidiser_wts = self.params["design_parameters"]["oxidiser_wts"]
        for i in range(len(self.oxidiser_wts)):
            self.oxidiser_wts[i] = self.oxidiser_wts[i][0]
        self.Pc__Pa = self.params["design_parameters"]["chamber_pressure__Pa"] # combustion chamber pressure [Pa]
        self.F__N = self.params["design_parameters"]["thrust__N"] # average thrust [N]
        self.OF = self.params["design_parameters"]["ox_fuel_ratio"] # oxidiser-fuel weight ratio
        self.PcOvPe = self.params["design_parameters"]["chamber_to_exit_pressure_ratio"] # chamber to exit pressure ratio
        self.pamb = self.params["design_parameters"]["ambient_operational_pressure__psia"] # ambient operational pressure [psia]

        # data storage
        self.data = []
        self.data.append(self.design_names)
        self.data.append(self.fuel)
        self.data.append(self.fuel_wts)
        self.data.append(self.oxidiser)
        self.data.append(self.oxidiser_wts)
        self.data.append(self.Pc__Pa)
        self.data.append(self.F__N)
        self.data.append(self.OF)
        self.data.append(self.PcOvPe)
        self.data.append(self.pamb)
        
        # check input data
        self.checker = DataChecker(test_run)
        self.designs_to_run = self.checker.input_data_check(self.data)
        
        # run parameters
        self.n = len(self.fuel)

        # setup the data path
        self.dataPath = dataPath

        if not self.dataPath:
            path = self.rootdir + "/data/"

            if not os.path.exists(path):
                os.makedirs(path)
            
            self.dataPath = path+"_"+datetime.now().strftime('%b%d_%H-%M-%S') + ".csv"
        
    def run_sizing_conical_noz(self, print_data=True, save_data=False):
        # initialise arrays
        self.epsilon = np.zeros(self.n) # throat to exit area ratio
        self.Isp__s = np.zeros(self.n) # specific impulse [s]
        self.gamma = np.zeros(self.n) # ratio of specific heat
        self.Tc__K = np.zeros(self.n) # combustion chamber temperature [K]
        self.m_dot__kg_per_s = np.zeros(self.n) # total mass flow rate [kg/s]
        self.mf_dot__kg_per_s = np.zeros(self.n) # fuel mass flow rate [kg/s]
        self.mo_dot__kg_per_s = np.zeros(self.n) # oxidiser mass flow rate [kg/s]
        self.M__kg_per_kmol = np.zeros(self.n) # molecular weight of the throat gases [kg/kmol]
        self.R = np.zeros(self.n) # specific gas constant [J/kgK]
        self.Pr_exit = np.zeros(self.n) # Prandtl number of exit 
        self.mu_exit__Pa_s = np.zeros(self.n) # viscosity of exit [Pa s]
        self.k_exit__W_per_m_K = np.zeros(self.n) # thermal conductivity of exhaust [W/m/K]
        self.At__mm2 = np.zeros(self.n) # the area of the throat [mm^2]
        self.Dt__mm = np.zeros(self.n) # throat diameter [mm]
        self.Ae__mm2 = np.zeros(self.n) # area of the nozzel exit [mm^2]
        self.De__mm = np.zeros(self.n) # nozzel exit diameter [mm]
        self.Dc__mm = np.zeros(self.n) # chamber diameter [mm]
        self.Lc__mm = np.zeros(self.n) # combustion chamber length [mm]
        
        
        # run sizing calcs for all engines
        for i in self.designs_to_run:
        
            # Find NASA CEA parameters ***EXACTLY THE SAME OUTPUT AS ONLINE NASA CEA***
            self.epsilon[i], self.Isp__s[i], self.M__kg_per_kmol[i], self.gamma[i], self.Tc__K[i], self.Pr_exit[i], self.mu_exit__Pa_s[i], self.k_exit__W_per_m_K[i] = self.run_CEA(self.fuel[i], self.oxidiser[i], self.Pc__Pa[i], self.OF[i], self.PcOvPe[i], self.pamb[i])
        
            # Complete sizing
            self.m_dot__kg_per_s[i] = self.F__N[i]/(self.Isp__s[i]*self.g)
            self.mf_dot__kg_per_s[i] = self.m_dot__kg_per_s[i]/(1+self.OF[i])
            self.mo_dot__kg_per_s[i] = self.m_dot__kg_per_s[i] - self.mf_dot__kg_per_s[i]
            self.R[i] = self.R_0/self.M__kg_per_kmol[i] # R = R_0/MW where R_0 = 8314: https://www.meracalculator.com/physics/fluid-mechanics/specific-gas-constant.php
            self.At__mm2[i] = 1e6*((self.m_dot__kg_per_s[i] * math.sqrt(self.Tc__K[i]))/self.Pc__Pa[i]) * math.sqrt(self.R[i]/self.gamma[i]) * pow(((self.gamma[i]+1)/2), (self.gamma[i]+1)/(2*(self.gamma[i]-1)))
            self.Dt__mm[i] = 2*math.sqrt(self.At__mm2[i]/math.pi)
            self.Ae__mm2[i] = self.At__mm2[i] * self.epsilon[i]
            self.De__mm[i] = 2*math.sqrt(self.Ae__mm2[i]/math.pi)
            self.Dc__mm[i] = 2*math.sqrt(9*self.At__mm2[i]/math.pi)
            self.Lc__mm[i] = (math.exp((0.029*pow(math.log(self.Dt__mm[i]/10),2)) + 0.47*math.log(self.Dt__mm[i]/10) + 1.94))*10
        
        print("ooga booga")
        # store data in class
        self.data.append(self.epsilon)
        self.data.append(self.Isp__s)
        self.data.append(self.gamma)
        self.data.append(self.Tc__K)
        self.data.append(self.M__kg_per_kmol)
        self.data.append(self.Pr_exit)
        self.data.append(self.mu_exit__Pa_s)
        self.data.append(self.k_exit__W_per_m_K)
        self.data.append(self.m_dot__kg_per_s)
        self.data.append(self.mf_dot__kg_per_s)
        self.data.append(self.mo_dot__kg_per_s)
        self.data.append(self.At__mm2)
        self.data.append(self.Dt__mm)
        self.data.append(self.Ae__mm2)
        self.data.append(self.De__mm)
        self.data.append(self.Dc__mm)
        self.data.append(self.Lc__mm)
        
        # check ouput data
        self.designs_to_run = self.checker.output_data_check(self.data, self.designs_to_run)
        
        if print_data:
            self.print_stored_data()
        if save_data:
            self.csv_name = self.data_to_CSV()
            
        #self.checker.final_checks(self.data, self.csv_name)
        
        if save_data:
            return self.csv_name
        else:
            return 0;
                
    
    def run_CEA(self, fuel_name, ox_name, Pc__Pa, OF, PcOvPe, pamb):
        # ***EXACTLY THE SAME OUTPUT AS ONLINE NASA CEA***
        C = CEA_Obj(oxName=ox_name, fuelName=fuel_name, thermal_cond_units='cal/s-cm-degC')
        Pc__psia = Pc__Pa*0.00014503773800722 # Pa to psia
        eps = C.get_eps_at_PcOvPe(Pc=Pc__psia, MR=OF, PcOvPe=PcOvPe) # get throat to exit area ratio
        Isp__s = C.estimate_Ambient_Isp(Pc=Pc__psia, MR=OF, eps=eps, Pamb=pamb)[0] # estimate specific impulse [s]
        M__kg_per_kmol, gamma = C.get_Throat_MolWt_gamma(Pc=Pc__psia, MR=OF, eps=eps) # get gamma at chamber and . It should be noted that although this value has units, its value is constant across all unit types: [kg/kmol]=[g/mol]=[lb/lbmol]
        Tc__K = C.get_Tcomb(Pc=Pc__psia, MR=OF)*(5/9) # get chamber temperature in Rankine and convert to Kelvin [K]
        Exit_trans = C.get_Exit_Transport(Pc=Pc__psia, MR=OF, eps=eps) # get exit transport properties [cp__BTU/lbm_degR, mu__millipoise, k__mcal/cm-K-s, Pr]
        Pr_exit = Exit_trans[3]
        mu_exit__Pa_s = Exit_trans[1]*0.0001 # millipoise to Pascal second
        k_exit__W_per_m_K = Exit_trans[2]*418.3999999994 # cal/s-cm-degC to WmK
        return eps, Isp__s, M__kg_per_kmol, gamma, Tc__K, Pr_exit, mu_exit__Pa_s, k_exit__W_per_m_K

    def setup_study_params(self):
        n = 100 # study iterations
        # store initial parameter file data
        init_project_name = self.params["project_name"]
        init_design_names = self.params["design_parameters"]["design_name"]
        init_fuel = self.params["design_parameters"]["fuel"]
        init_fuel_wts = self.params["design_parameters"]["fuel_wts"]
        init_oxidiser = self.params["design_parameters"]["oxidiser"]
        init_oxidiser_wts = self.params["design_parameters"]["oxidiser_wts"]
        init_Pc__Pa = self.params["design_parameters"]["chamber_pressure__Pa"]
        init_F__N = self.params["design_parameters"]["thrust__N"]
        init_OF = self.params["design_parameters"]["ox_fuel_ratio"]
        init_PcOvPe = self.params["design_parameters"]["chamber_to_exit_pressure_ratio"]
        init_pamb = self.params["design_parameters"]["ambient_operational_pressure__psia"]
        # init empty lists for new input data
        new_design_names = []
        new_fuel = []
        new_fuel_wts = []
        new_oxidiser = []
        new_oxidiser_wts = []
        new_Pc__Pa = []
        new_F__N = []
        new_OF = []
        new_PcOvPe = []
        new_pamb = []
        # interpolate between start and end input params
        for i in range(n):
            new_design_names.append(init_design_names[0])
            new_fuel.append(init_fuel[0])
            fuel_wts_strg = []
            for ii in range(len(init_fuel_wts[0])):
                fuel_wts_strg.append(np.linspace(init_fuel_wts[0][ii], init_fuel_wts[1][ii], num=n)[i])
            new_fuel_wts.append(fuel_wts_strg)
            new_oxidiser.append(init_oxidiser[0])
            oxidiser_wts_strg = []
            for ii in range(len(init_oxidiser_wts[0])):
                oxidiser_wts_strg.append(np.linspace(init_oxidiser_wts[0][ii], init_oxidiser_wts[1][ii], num=n)[i])
            new_oxidiser_wts.append(oxidiser_wts_strg)
            new_Pc__Pa.append(np.linspace(init_Pc__Pa[0], init_Pc__Pa[1], num=n)[i])
            new_F__N.append(np.linspace(init_F__N[0], init_F__N[1], num=n)[i])
            new_OF.append(np.linspace(init_OF[0], init_OF[1], num=n)[i])
            new_PcOvPe.append(np.linspace(init_PcOvPe[0], init_PcOvPe[1], num=n)[i])
            new_pamb.append(np.linspace(init_pamb[0], init_pamb[1], num=n)[i])
        # update input parameters
        self.params["design_parameters"]["design_name"] = np.copy(new_design_names).tolist()
        self.params["design_parameters"]["fuel"] = np.copy(new_fuel).tolist()
        self.params["design_parameters"]["fuel_wts"] = np.copy(new_fuel_wts).tolist()
        self.params["design_parameters"]["oxidiser"] = np.copy(new_oxidiser).tolist()
        self.params["design_parameters"]["oxidiser_wts"] = np.copy(new_oxidiser_wts).tolist()
        self.params["design_parameters"]["chamber_pressure__Pa"] = np.copy(new_Pc__Pa).tolist()
        self.params["design_parameters"]["thrust__N"] = np.copy(new_F__N).tolist()
        self.params["design_parameters"]["ox_fuel_ratio"] = np.copy(new_OF).tolist()
        self.params["design_parameters"]["chamber_to_exit_pressure_ratio"] = np.copy(new_PcOvPe).tolist()
        self.params["design_parameters"]["ambient_operational_pressure__psia"] = np.copy(new_pamb).tolist()

    def blend_props(self):
        new_fuel_names = []
        new_ox_names = []
        fuels = self.params["design_parameters"]["fuel"]
        fuel_wts = self.params["design_parameters"]["fuel_wts"]
        oxidisers = self.params["design_parameters"]["oxidiser"]
        oxidiser_wts = self.params["design_parameters"]["oxidiser_wts"]
        for i in range(len(fuels)):
            # creat new fuel blend
            try:
                new_fuel_blend = blends.newFuelBlend(fuels[i], fuel_wts[i])
                # add new fuel name to list
                new_fuel_names.append(new_fuel_blend)
            except:
                new_fuel_names.append(fuels[i][0])
            # create new oxidiser blend
            try:
                new_oxidiser_blend = blends.newOxBlend(oxidisers[i], oxidiser_wts[i])
                # add new oxidiser name to list
                new_ox_names.append(new_oxidiser_blend)
            except:
                new_ox_names.append(oxidisers[i][0])
        # update input parameters
        self.params["design_parameters"]["fuel"] = np.copy(new_fuel_names).tolist()
        oxidisers = self.params["design_parameters"]["oxidiser"] = np.copy(new_ox_names).tolist()

    def print_stored_data(self):
        print(f"***Results for {self.project_name}***")
        for i in self.designs_to_run:
            print(f"--------------------------Engine {i}: {self.design_names[i]}--------------------------")
            print("Input Design Parameters:")
            print(f"Fuel:                               {self.fuel[i]}")
            print(f"Oxidiser:                           {self.oxidiser[i]}")
            print(f"OF Ratio (by weight):               {self.OF[i]}")
            print(f"Chamber Pressure:                   {self.Pc__Pa[i]} Pa")
            print(f"Average Thrust:                     {self.F__N[i]} N")
            print(f"Chamber to Exit Pressure Ratio:     {self.PcOvPe[i]}")
            print(f"Ambient Operational Pressure:       {self.pamb[i]} psia")
            print("\n")
            print("Output NASA CEA Parameters:")
            print(f"Epsilon:                            {self.epsilon[i]:.6f}")
            print(f"Specific Impulse:                   {self.Isp__s[i]:.6f} s")
            print(f"Molecular Weight:                   {self.M__kg_per_kmol[i]:.6f} kg/kmol")
            print(f"Gamma:                              {self.gamma[i]:.6f}")
            print(f"Gas Constant of Throat:             {self.R[i]:.6f} J/kgK")
            print(f"Combustion Chamber Temperature:     {self.Tc__K[i]:.6f} K")
            print("\n")
            print("Output Mass Flow Rate Parameters:")
            print(f"Total Mass Flow Rate:               {self.m_dot__kg_per_s[i]:.6f} kg/s")
            print(f"Fuel Mass Flow Rate:                {self.mf_dot__kg_per_s[i]:.6f} kg/s")
            print(f"Oxidiser Mass Flow Rate:            {self.mo_dot__kg_per_s[i]:.6f} kg/s")
            print("\n")
            print("Output Sizing Parameters:")
            print(f"Throat Area:                        {self.At__mm2[i]:.6f} mm^2")
            print(f"Throat Diameter:                    {self.Dt__mm[i]:.6f} mm")
            print(f"Exit Area:                          {self.Ae__mm2[i]:.6f} mm^2")
            print(f"Exit Diameter:                      {self.De__mm[i]:.6f} mm")
            print(f"Chamber Diameter:                   {self.Dc__mm[i]:.6f} mm")
            print(f"Chamber Length:                     {self.Lc__mm[i]:.6f} mm")
            print("------------------------------------------------------------")
            print("\n\n")

    def data_to_CSV(self):
        # save data to csv
        csv_file = csv.writer(open(self.dataPath, 'w'))
        
        data_headings = [
            "Engine Name", "Fuel", "Fuel Concentration [%]", "Oxidiser", "Oxidiser Concentration [%]", "Chamber Pressure [Pa]", "Average Thrust [N]", "Oxidiser-Fuel Weight Ratio", "Chamber to Exit Pressure Ratio", "Ambient Operational Pressure [psia]",
            "Epsilon", "Specific Impulse [s]", "Gamma", "Combustion Chamber Temperature [K]", "Molecular Weight [kg/kmol]", "Prandtl Number of Exhaust", "Viscosity of Exhaust [Pa s]", "Thermal Conductivity of Exhaust [W/m/K]",
            "Total Mass Flow Rate [kg/s]", "Fuel Mass Flow Rate [kg/s]", "Oxidiser Mass Flow Rate [kg/s]",
            "Throat Area [mm^2]", "Throat Diameter [mm]", "Exit Area [mm^2]", "Exit Diameter [mm]", "Chamber Diameter [mm]", "Chamber Length [mm]",
        ]
        csv_file.writerow(data_headings)
        data_row = []
        for i in self.designs_to_run:
            for ii in range(len(self.data)):
                data_row.append(self.data[ii][i])
            csv_file.writerow(data_row)
            data_row.clear()
        print("Data Saved Successfully")

    def load_YAML(self, yaml_filename):
        with open(yaml_filename) as cfg_file:
            params = yaml.load(cfg_file, Loader=yaml.FullLoader)
        return params
        
    def print_logo(self):
        print("\n██████╗  █████╗ ███████╗██╗██╗  ██╗██╗\n██╔══██╗██╔══██╗██╔════╝██║██║ ██╔╝██║\n██████╔╝███████║█████╗  ██║█████╔╝ ██║\n██╔══██╗██╔══██║██╔══╝  ██║██╔═██╗ ██║\n██║  ██║██║  ██║██║     ██║██║  ██╗██║\n╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝\n")
        
    def print_monkey(self):
        print('\n                 ."`".\n             .-./ _=_ \.-.\n            {  (,(oYo),) }}\n            {{ |   "   |} }\n            { { \(---)/  }}\n            {{  }"-=-"{ } }\n            { { }._:_.{  }}\n            {{  } -:- { } }\n            {{  } -:- { } }\n            {_{ }`===`{  _}\n           ((((\)     (/))))')
        
#                  ."`".
#              .-./ _=_ \.-.
#             {  (,(oYo),) }}
#             {{ |   "   |} }
#             { { \(---)/  }}
#             {{  }"-=-"{ } }
#             { { }._:_.{  }}
#             {{  } -:- { } }
#             {_{ }`===`{  _}
#            ((((\)     (/))))

# ██████╗  █████╗ ███████╗██╗██╗  ██╗██╗
# ██╔══██╗██╔══██╗██╔════╝██║██║ ██╔╝██║
# ██████╔╝███████║█████╗  ██║█████╔╝ ██║
# ██╔══██╗██╔══██║██╔══╝  ██║██╔═██╗ ██║
# ██║  ██║██║  ██║██║     ██║██║  ██╗██║
# ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝
                                      

