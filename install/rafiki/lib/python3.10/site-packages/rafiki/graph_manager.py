import os
import yaml
import inspect
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick

class GraphManager:
    def __init__(self, data_path, config_path):
        # Make input details table data
        self.input_params = self.load_YAML(config_path)
        self.project_name = self.input_params["project_name"]
        self.design_names = self.input_params["design_parameters"]["design_name"]
        self.fuel = self.input_params["design_parameters"]["fuel"]
        self.fuel_wts = self.input_params["design_parameters"]["fuel_wts"]
        self.oxidiser = self.input_params["design_parameters"]["oxidiser"]
        self.oxidiser_wts = self.input_params["design_parameters"]["oxidiser_wts"]
        self.Pc__Pa = self.input_params["design_parameters"]["chamber_pressure__Pa"]
        self.F__N = self.input_params["design_parameters"]["thrust__N"]
        self.OF = self.input_params["design_parameters"]["ox_fuel_ratio"] 
        self.PcOvPe = self.input_params["design_parameters"]["chamber_to_exit_pressure_ratio"]
        self.pamb = self.input_params["design_parameters"]["ambient_operational_pressure__psia"]
        self.input_table_headings = [
            "Fuel", "Fuel Concentration\n[%]", "Oxidiser", "Oxidiser Concentration\n[%]", "Chamber Pressure\n[Pa]", "Average Thrust\n[N]", "Oxidiser-Fuel\nWeight Ratio", "Chamber to Exit\nPressure Ratio", "Ambient Pressure\n[psia]"
        ]
        self.input_table_data = [[self.fuel, self.fuel_wts, self.oxidiser, self.oxidiser_wts, self.Pc__Pa, self.F__N, self.OF, self.PcOvPe, self.pamb]]

        self.data = np.genfromtxt(data_path, delimiter=',')
        self.data_length = len(self.data)
        self.data_headings = [
            "Engine Name", "Fuel", "Fuel Concentration [%]", "Oxidiser", "Oxidiser Concentration [%]", "Chamber Pressure [Pa]", "Average Thrust [N]", "Oxidiser-Fuel Weight Ratio", "Chamber to Exit Pressure Ratio", "Ambient Operational Pressure [psia]",
            "Epsilon", "Specific Impulse [s]", "Gamma", "Combustion Chamber Temperature [K]", "Molecular Weight [kg/kmol]", "Prandtl Number of Exhaust", "Viscosity of Exhaust [Pa s]", "Thermal Conductivity of Exhaust [W/m/K]",
            "Total Mass Flow Rate [kg/s]", "Fuel Mass Flow Rate [kg/s]", "Oxidiser Mass Flow Rate [kg/s]",
            "Throat Area [mm^2]", "Throat Diameter [mm]", "Exit Area [mm^2]", "Exit Diameter [mm]", "Chamber Diameter [mm]", "Chamber Length [mm]",
        ]
        self.data_headings_of_interest = [
            "Epsilon", "Specific Impulse [s]", "Gamma", "Combustion Chamber Temperature [K]",
            "Throat Diameter [mm]", "Exit Diameter [mm]", "Chamber Diameter [mm]", "Chamber Length [mm]",
            "Total Mass Flow Rate [kg/s]", "Fuel Mass Flow Rate [kg/s]", "Oxidiser Mass Flow Rate [kg/s]",
        ]
        self.data_colour = [
            'r', 'r', 'r', 'r',
            'g', 'g', 'g', 'g',
            'b', 'm', 'c',
        ]
        self.max_plots = len(self.data_headings_of_interest) # 9 as the flow rates will be plotted on one graph
        self.data_dict = {}
        
    def plot_all_data_of_interest(self):
        data_of_interest_header = self.input_params["param_of_interest"]
        data_of_interest_indx = None
        # generate variables with stored data
        for idx, name in enumerate(self.data_headings):
            if data_of_interest_header == name:
                self.data_dict['data_of_interest'] = np.array(self.data[1:,idx])
                data_of_interest_indx = idx-1
            else:
                self.data_dict[name] = np.array(self.data[1:,idx])
        for i in range(len(self.input_table_data[0])):
            if i == data_of_interest_indx:
                pass
            else:
                self.input_table_data[0][i] = self.input_table_data[0][i][0]
        
        # plot data
        fig = plt.figure(1)
        table = plt.table(cellText=self.input_table_data, cellLoc='center', colLabels=self.input_table_headings, colLoc='center', loc='top', bbox=[0.05, 1.03, 0.9, 0.1], edges='closed')
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        plt.xticks(color='white')
        plt.yticks(color='white')
        a = plt.gca()
        a.spines['left'].set_color('white')
        a.spines['top'].set_color('white')
        a.spines['right'].set_color('white')
        a.spines['bottom'].set_color('white')
        plt.subplots_adjust(hspace=0.5)
        
        fig_num = 1
        manager = plt.get_current_fig_manager()
        manager.window.showMaximized()
        fig.tight_layout()
        for i in range(self.max_plots):
            if fig_num <= 9:
                ax = fig.add_subplot(330+fig_num) #plt.subplot(330+fig_num)
                ax.plot(self.data_dict['data_of_interest'], self.data_dict[self.data_headings_of_interest[i]], self.data_colour[i], label=self.data_headings_of_interest[i])
                ax.set_xlabel(data_of_interest_header)
                ax.set_ylabel(self.data_headings_of_interest[i])
                fig_num += 1
            else:
                ax.plot(self.data_dict['data_of_interest'], self.data_dict[self.data_headings_of_interest[i]], self.data_colour[i], label=self.data_headings_of_interest[i])
                if i == (self.max_plots - 1):
                    ax.legend()
            ax.grid(True)
        data_of_interest = self.data_dict['data_of_interest']
        fig.suptitle(f'Parametric Study of Varying {data_of_interest_header} Between {data_of_interest[0]} and {data_of_interest[-1]}')
        
        plt.subplots_adjust(wspace=0.2)
        plt.subplots_adjust(hspace=0.5)
        plt.subplots_adjust(top=0.85)
        plt.show()
        
    
    """ Utility Functions """    
    def load_YAML(self, yaml_filename):
        with open(yaml_filename) as cfg_file:
            params = yaml.load(cfg_file, Loader=yaml.FullLoader)
        return params
