import os
from rocketcea.cea_obj import CEA_Obj

class DataChecker:
    def __init__(self, test_run=False):
        self.test_run = test_run # determines if errors or error codes should be raised
        self.test_score = 0
        
    def input_data_check(self, data):
        designs_to_run = []
        for i in range(len(data[0])):
            designs_to_run.append(i)
        dead_designs = []

        # data types check
        self.check_data_types(data, dead_designs)
        
        # zero and negative floats check
        self.check_for_neg_float(data, dead_designs)
        
        # check propelant strings
        self.check_prop_strings(data, dead_designs)
        
        # filter out dead designs
        for i in range(len(dead_designs)):
            try:
                designs_to_run.remove(dead_designs[i])
            except:
                pass
        return designs_to_run
        
    def output_data_check(self, data, designs_to_run):
        dead_designs = []
        
        # check that output Lc is within accuracy range
        self.check_Lc_in_range(data, dead_designs)
        
        # filter out dead designs
        for i in range(len(dead_designs)):
            try:
                designs_to_run.remove(dead_designs[i])
            except:
                pass
        return designs_to_run

    def final_checks(self, data, csv_name):
        # Other General test checks
        # check if csv was created
        if os.path.exists(csv_name):
            self.test_score += 1
        
    def check_data_types(self, data, dead_designs):
        for i in range(len(data[0])):
            # check data types
            expected_data_types = [str, str, float, str, float, float, float, float, float, float]
            for ii in range(len(data)):
                if type(data[ii][i]) != expected_data_types[ii]:
                    if self.test_run == False:
                        dead_designs.append(i)
                        raise RuntimeError(f"Incorrect data type at index [{ii}][{i}] in config file. Should be type {expected_data_types[ii]} but was input as {type(data[ii][i])}.")
                    else:
                        dead_designs.append(i)
                        self.test_score += 1
    
    def check_for_neg_float(self, data, dead_designs):
        for i in range(len(data[0])):
            # check for floats that are 0 or less
            for ii in range(len(data)):
                if type(data[ii][i]) == float and data[ii][i] <= 0:
                    if self.test_run == False:
                        raise RuntimeError(f"Input parameter at index [{ii}][{i}] in config file was found to be equal or less than zero.")
                    else:
                        dead_designs.append(i)
                        self.test_score += 1
                        
    def check_prop_strings(self, data, dead_designs):
        for i in range(len(data[0])):
            # check propelant strings are correct for RocketCEA
            try:
                C = CEA_Obj(oxName=data[3][i], fuelName=data[1][i])
            except:
                if self.test_run == False:
                    C = CEA_Obj(oxName=data[3][i], fuelName=data[1][i])
                else:
                    dead_designs.append(i)
                    self.test_score += 1
                    
    # For details on how this Lc range was dericed please refer to the Athena article
    # here: http://athena.leedsrocketry.co.uk/doku.php?id=engine_sizing
    def check_Lc_in_range(self, data, dead_designs):
        for i in range(len(data[0])):
            if data[-1][i] > 1200 or data[-1][i] < 0.25:
                if self.test_run == False:
                    raise RuntimeError(f"The output Lc is not accurate with current model for design {data[0][i]}.")
                else:
                    dead_designs.append(i)
                    self.test_score += 1
        
