# References:
# [1] - https://neutrium.net/fluid-flow/pressure-loss-from-fittings-excess-head-k-method/
# [2] - https://neutrium.net/fluid-flow/pressure-loss-from-fittings-expansion-and-reduction-in-pipe-size/
# [3] - https://en.wikipedia.org/wiki/Hydraulic_diameter#List_of_hydraulic_diameters
import numpy as np
import matplotlib.pyplot as plt

class PressureDropCircuit:
    def __init__(self, REDH_LAMINAR, REDH_TURBULENT):
        self.REDH_LAMINAR = REDH_LAMINAR
        self.REDH_TURBULENT = REDH_TURBULENT
        self.dP__Pa = [0]
        self.x = []
        self.labels = []
        
    def add_straight_pipes_circ(self, r__m, n_pipes, len__m, mdot__kg_s, rho__kg_m3, mu__Pas, label):
        # add label
        self.labels.append(label)
        # calculate pressure drop 
        A__m2 = (np.pi * pow(r__m,2))*n_pipes
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        Re = rho__kg_m3*V__m3_s*(r__m*2)/mu__Pas
        fdarcy = self.f_darcy(Re)
        dpdx = self.dp_dx(f_darcy=fdarcy, rho=rho__kg_m3, V=V__m3_s, Dh=r__m*2*n_pipes)
        self.dP__Pa.append(dpdx * len__m)
    
    def add_straight_pipes_rectangular_box(self, w__m, h__m, n_pipes, len__m, mdot__kg_s, rho__kg_m3, mu__Pas, label):
        # add label
        self.labels.append(label)
        # calculate pressure drop 
        A__m2 = w__m * h__m * n_pipes
        Dh__m = ((2*w__m*h__m)/(w__m+h__m))*n_pipes
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        Re = rho__kg_m3*V__m3_s*Dh__m/mu__Pas
        fdarcy = self.f_darcy(Re)
        dpdx = self.dp_dx(f_darcy=fdarcy, rho=rho__kg_m3, V=V__m3_s, Dh=Dh__m)
        self.dP__Pa.append(dpdx * len__m)
    
    def add_orifice(self, r__m, n_ori, CD, mdot__kg_s, rho__kg_m3, label):
        # Note: CD (coefficient of discharge) for Louie was estimated as 0.7
        # add label
        self.labels.append(label)
        # calculate pressure drop
        A__m2 = (np.pi*pow(r__m,2))
        self.dP__Pa.append((pow((mdot__kg_s/CD/A__m2),2) / (2*rho__kg_m3))*n_ori)
        
    def add_circular_pipe_rectangular_box(self, r__m, w__m, h__m, percentage_travelled, mdot__kg_s, rho__kg_m3, mu__Pas, label, n=1):
        # Note: this is for a pipe with a rectangular box section
        # add label
        self.labels.append(label)
        # calculate pressure drop
        len__m = percentage_travelled*(2*np.pi*(r__m))
        A__m2 = w__m * h__m
        Dh__m = 2*w__m*h__m/(w__m+h__m)
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        Re = rho__kg_m3*V__m3_s*Dh__m/mu__Pas
        fdarcy = self.f_darcy(ReDh=Re)
        dpdx = self.dp_dx(f_darcy=fdarcy, rho=rho__kg_m3, V=V__m3_s, Dh=Dh__m)
        self.dP__Pa.append(dpdx * len__m * n)
        
    def add_circular_pipe_circular(self, r__m, rp__m, percentage_travelled, mdot__kg_s, rho__kg_m3, mu__Pas, label, n=1):
        # Note: this is for a pipe with a rectangular box section
        # add label
        self.labels.append(label)
        # calculate pressure drop
        len__m = percentage_travelled*(2*np.pi*(r__m))
        A__m2 = np.pi*pow(rp__m,2)
        Dh__m = rp__m*2
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        Re = rho__kg_m3*V__m3_s*Dh__m/mu__Pas
        fdarcy = self.f_darcy(ReDh=Re)
        dpdx = self.dp_dx(f_darcy=fdarcy, rho=rho__kg_m3, V=V__m3_s, Dh=Dh__m)
        self.dP__Pa.append(dpdx * len__m * n)
        
    def add_90deg_turn_annulus(self, r_inner__m, r_outer__m, mdot__kg_s, rho__kg_m3, label, n=1):
        # add label
        self.labels.append(label)
        # calculate pressure drop
        K = 1.3 # [1]
        A__m2 = np.pi*(pow(r_outer__m,2)-pow(r_inner__m,2))
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        self.dP__Pa.append((K * 0.5 * rho__kg_m3 * pow(V__m3_s,2))*n)
        
    def add_90deg_turn_circular(self, r__m, mdot__kg_s, rho__kg_m3, label, n=1):
        # add label
        self.labels.append(label)
        # calculate pressure drop
        K = 1.3 # [1]
        A__m2 = np.pi*pow(r__m,2)
        V__m3_s = mdot__kg_s/(A__m2*rho__kg_m3)
        self.dP__Pa.append((K * 0.5 * rho__kg_m3 * pow(V__m3_s,2))*n)
        
    def add_square_area_reduction(self, A_in__m2, A_out__m2, Dh_in__m, mdot__kg_s, rho__kg_m3, mu__Pas, label):
        # add label
        self.labels.append(label)
        # calculate pressure drop
        V__m3_s = mdot__kg_s/(A_in__m2*rho__kg_m3)
        Re = rho__kg_m3 * V__m3_s * Dh_in__m / mu__Pas
        if Re < 2500: 
            K = (1.2+(160/Re))*(pow(A_in__m2/A_out__m2,2)-1) # [3]
        else:
            fdarcy = self.f_darcy(ReDh=Re)
            K = (0.6+0.48*fdarcy)*(A_in__m2/A_out__m2)*((A_in__m2/A_out__m2)-1) # [3]
        self.dP__Pa.append(K * 0.5 * rho__kg_m3 * pow(V__m3_s,2))
        
    def add_square_area_expansion(self, A_in__m2, A_out__m2, Dh_in__m, mdot__kg_s, rho__kg_m3, mu__Pas, label):
        # add label
        self.labels.append(label)
        # calculate pressure drop
        V__m3_s = mdot__kg_s/(A_in__m2*rho__kg_m3)
        Re = rho__kg_m3 * V__m3_s * Dh_in__m / mu__Pas
        if Re < 4000:
            K =  2*(1-pow((A_in__m2/A_out__m2),4))
        else:
            fdarcy = self.f_darcy(ReDh=Re)
            K = (1+0.8*fdarcy)*pow((1-pow((A_in__m2/A_out__m2),2)),2)
        self.dP__Pa.append(K * 0.5 * rho__kg_m3 * pow(V__m3_s,2))

    def add_manual_pressure_drop(self, dP__Pa, label):
        # add label
        self.labels.append(label)
        # add pressure drop
        self.dP__Pa.append(dP__Pa)
    
    def calc_total_pressure_drop(self):
        self.dP_total__Pa = sum(self.dP__Pa)
        # print results
        for i in range(len(self.labels)):
            print(f"{self.dP__Pa[i+1]} Pa ({self.labels[i]})")
        print(f"\nTotal pressure drop = {self.dP_total__Pa} Pa")
    
    def plot_pressure_drop(self):
        for i in range(len(self.dP__Pa)):
            self.x.append(i)
        self.dP_each_station__Pa = np.cumsum(self.dP__Pa)
        plt.plot(self.x, self.dP_each_station__Pa/1e5)
        plt.scatter(self.x, self.dP_each_station__Pa/1e5)
        for i in range(len(self.labels)):
            if i < 7:
                plt.text(self.x[i] + 0.5, self.dP_each_station__Pa[i]/1e5, self.labels[i], rotation = "vertical")
            elif i == 7:
                plt.text(self.x[i] + 0.5, (self.dP_each_station__Pa[i]/1e5)-3.0, self.labels[i], rotation = "vertical")
            else:
                plt.text(self.x[i] + 0.5, (self.dP_each_station__Pa[i]/1e5)-1.0, self.labels[i], rotation = "vertical")
        plt.xlabel("Station")
        plt.ylabel("Pressure drop (Bar)")
        plt.title("Coolant Circuit Pressure Drop")
        plt.grid()
        plt.show()
    
    def f_darcy(self, ReDh):
        if ReDh < self.REDH_LAMINAR:
            # laminar
            return 64.0/ReDh
        else:
            # Putukhov equation for smooth pipes
            f_darcy_turbulent = pow((0.79*np.log(ReDh)-1.64), -2)
            if ReDh < self.REDH_TURBULENT:
                # transitional
                f_darcy_laminar = 64.0/ReDh
                # blend between laminar and turbulent region
                return np.interp(ReDh,
                                 [self.REDH_LAMINAR, self.REDH_TURBULENT],
                                 [f_darcy_laminar, f_darcy_turbulent])
            else:
                # turbulent
                return f_darcy_turbulent
                    
    def dp_dx(self, f_darcy, rho, V, Dh):
        return f_darcy*(rho/2)*pow(V,2)/Dh
