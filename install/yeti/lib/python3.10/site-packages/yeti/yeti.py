import yaml
import math
import os
import inspect
import time
import scipy.optimize
import numpy as np
import cusfbamboo as bam
import matplotlib.pyplot as plt
import cantera as ct
from CoolProp.CoolProp import PropsSI
from yeti.pressure_drop_circuit import PressureDropCircuit

class Yeti:
    def __init__(self, rootdir, cfg):
        # IMPORTANT: do not remove following code, will break code
        self.print_monkey()
        self.print_logo()
        time.sleep(2)
        
        # load input parameters
        self.rootdir = rootdir
        self.params = self.load_YAML(cfg)
        self.input_data_path = self.params["input_data"]
        
        # load input parameters from rafiki-generated csv
        self.input_data = np.genfromtxt(self.input_data_path, delimiter=',')
        self.input_data_len = len(self.input_data)
        self.input_data_headings = [
            "Engine Name", "Fuel", "Fuel Concentration [%]", "Oxidiser", "Oxidiser Concentration [%]", "Chamber Pressure [Pa]", "Average Thrust [N]", "Oxidiser-Fuel Weight Ratio", "Chamber to Exit Pressure Ratio", "Ambient Operational Pressure [psia]",
            "Epsilon", "Specific Impulse [s]", "Gamma", "Combustion Chamber Temperature [K]", "Molecular Weight [kg/kmol]", "Prandtl Number of Exhaust", "Viscosity of Exhaust [Pa s]", "Thermal Conductivity of Exhaust [W/m/K]",
            "Total Mass Flow Rate [kg/s]", "Fuel Mass Flow Rate [kg/s]", "Oxidiser Mass Flow Rate [kg/s]",
            "Throat Area [mm^2]", "Throat Diameter [mm]", "Exit Area [mm^2]", "Exit Diameter [mm]", "Chamber Diameter [mm]", "Chamber Length [mm]",
        ]
        self.input_data_dict = {}
        for idx, name in enumerate(self.input_data_headings):
            self.input_data_dict[name] = np.array(self.input_data[1:,idx])
        self.Pc__Pa = self.input_data_dict["Chamber Pressure [Pa]"][0] # Chamber pressure [Pa]
        self.F__N = self.input_data_dict["Average Thrust [N]"][0] # Average thrust [N]
        self.pamb = self.input_data_dict["Ambient Operational Pressure [psia]"][0]/0.00014503773800722 # Ambient pressure [Pa]
        self.OF = self.input_data_dict["Oxidiser-Fuel Weight Ratio"][0] # Oxidiser-fuel weight ratio
        self.isp__s = self.input_data_dict["Specific Impulse [s]"][0]
        self.gamma_t = self.input_data_dict["Gamma"][0] # Gamma at throat
        self.M__kg_per_kmol = self.input_data_dict["Molecular Weight [kg/kmol]"][0] # molecular weight of the throat gases [kg/kmol]
        self.Tc__K = self.input_data_dict["Combustion Chamber Temperature [K]"][0] # Temperature in combustion chamber [K]
        #self.xs__m = [] # List of geometry points along major axis [m]
        self.Rt__m = (self.input_data_dict["Throat Diameter [mm]"][0]/2000) # Throat radius [m]
        self.Rc__m = self.input_data_dict["Chamber Diameter [mm]"][0]/2000 # Chamber radius [m]
        self.Re__m = self.input_data_dict["Exit Diameter [mm]"][0]/2000 # Exit radius [m]
        self.rs__m = [self.Rc__m, self.Rc__m, self.Rt__m, self.Re__m] # Radial geometry points [m]
        self.Pr_exhaust = self.input_data_dict["Prandtl Number of Exhaust"][0] # Prandtl number of exhaust
        self.mu_exhaust = self.input_data_dict["Viscosity of Exhaust [Pa s]"][0] # viscosity of exhaust
        self.k_exhaust = self.input_data_dict["Thermal Conductivity of Exhaust [W/m/K]"][0] # thermal conductivity of exhaust
        
        # load input parameters from config file
        self.wall_material = self.params["cooling_parameters"]["wall_material"] # Inner wall material
        self.oxidiser = self.params["cooling_parameters"]["oxidiser"]
        self.fuel = self.params["cooling_parameters"]["fuel"]
        self.wall_thickness__m = self.params["cooling_parameters"]["wall_thickness__m"] # Inner wall thickness
        self.cool_in_t__T = self.params["cooling_parameters"]["cool_in_t__T"] # Coolant inlet static temperature [K]
        self.cool_in_p__Pa = self.params["cooling_parameters"]["cool_in_p__Pa"] # Coolant inlet static pressure [Pa]
        self.channel_height__m = self.params["cooling_parameters"]["channel_height__m"] # radial height of the cooling channels [m]
        self.blockage_ratio = self.params["cooling_parameters"]["blockage_ratio"] # percentage of annular flow that is blocked by channels [%]
        self.number_of_channels = self.params["cooling_parameters"]["number_of_channels"] # number of cooling channels
        self.cool_mdot__kg_per_s = self.params["cooling_parameters"]["cool_mdot__kg_per_s"] # mass flowrate of coolant [kg/s]
        self.xs__m = self.params["cooling_parameters"]["xs__m"] # List of geometry points along major axis [m]
        self.OF_t_inlet__K = self.params["cooling_parameters"]["OF_t_inlet__k"] # oxygen/fuel inlet temperature [K]
        # blockage ratio params
        self.n_channels = self.params["cooling_parameters"]["number_of_channels"] # number of cooling channels
        self.channel_width__m = self.params["cooling_parameters"]["channel_width__m"] # width of cooling channels [m]
        self.channel_width_chamber__m = self.params["cooling_parameters"]["channel_width_chamber__m"]
        self.channel_height__m = self.params["cooling_parameters"]["channel_height__m"] # radial height of the cooling channels [m]
        self.x_convergence__m = self.params["cooling_parameters"]["xs__m"][1] # point along x where the chamber ends [m]
        self.r_throat__m = self.Rt__m # Throat radius [m]
        self.r_chamber__m = self.Rc__m = self.input_data_dict["Chamber Diameter [mm]"][0]/2000 # Chamber radius [m]
        self.wall_thickness__m = self.params["cooling_parameters"]["wall_thickness__m"] # Inner wall thickness
        self.inlet_jacket_thickness__m = self.params["cooling_parameters"]["inlet_jacket_thickness__m"] # cooling jacket thickness [m]
        self.outlet_jacket_thickness__m = self.params["cooling_parameters"]["outlet_jacket_thickness__m"] # cooling jacket thickness [m]
        # coolant pressure drop params
        self.cool_CD = self.params["cooling_parameters"]["cool_CD"] # coolant coefficient of discharge
        self.cool_K = self.params["cooling_parameters"]["cool_K"] # K-value i.e. Resistance Coefficient
        self.REDH_LAMINAR = self.params["cooling_parameters"]["REDH_LAMINAR"] # Coolant Re for laminar flow
        self.REDH_TURBULENT = self.params["cooling_parameters"]["REDH_TURBULENT"] # Coolant Re for turbulent flow
        self.cool_rho__kg_m3 = self.params["cooling_parameters"]["cool_rho__kg_m3"] # density of coolant [kg/m3]
        self.cool_mu__Pas = self.params["cooling_parameters"]["cool_mu__Pas"] # viscosity of coolant [Pa s]
        self.cool_delivery_len__m = self.params["cooling_parameters"]["cool_delivery_pipe_len__m"] # length of coolant delivery pipe [m]
        self.cool_delivery_d__m = self.params["cooling_parameters"]["cool_delivery_pipe_d__m"] # diameter of coolant delivery pipe [m]
        self.cool_inlet_pipe_d__m = self.params["cooling_parameters"]["cool_inlet_pipe_d__m"] # coolant inlet pipe diameter [m]
        self.cool_inlet_pipe_len__m = self.params["cooling_parameters"]["cool_inlet_pipe_len__m"] # coolant inlet pipe length [m]
        self.cool_inlet_pipe_n = self.params["cooling_parameters"]["cool_inlet_pipe_n"] # coolant number of inlet pipe
        self.cool_inlet_ring_r__m = self.params["cooling_parameters"]["cool_inlet_ring_r__m"] # outer radius of the coolant inlet ring [m]
        self.cool_inlet_ring_w__m = self.params["cooling_parameters"]["cool_inlet_ring_w__m"] # inlet ring width (modeled as a rectangular pipe) [m]
        self.cool_inlet_ring_h__m = self.params["cooling_parameters"]["cool_inlet_ring_h__m"] # inlet ring height (modeled as a rectangular pipe) [m]
        self.cool_outlet_pipe_d__m = self.params["cooling_parameters"]["cool_outlet_pipe_d__m"] # coolant outlet pipe diameter [m]
        self.cool_outlet_pipe_len__m = self.params["cooling_parameters"]["cool_outlet_pipe_len__m"] # coolant outlet pipe length [m]
        self.cool_outlet_pipe_n = self.params["cooling_parameters"]["cool_outlet_pipe_n"] # coolant number of outlet pipe
        self.cool_outlet_ring_r__m = self.params["cooling_parameters"]["cool_outlet_ring_r__m"] # outer radius of the coolant outlet ring [m]
        self.cool_outlet_ring_w__m = self.params["cooling_parameters"]["cool_outlet_ring_w__m"] # outlet ring width (modeled as a rectangular pipe) [m]
        self.cool_outlet_ring_h__m = self.params["cooling_parameters"]["cool_outlet_ring_h__m"] # outlet ring height (modeled as a rectangular pipe) [m]
        self.cool_return_len__m = self.params["cooling_parameters"]["cool_return_pipe_len__m"] # # length of return pipe [m]
        self.cool_return_d__m = self.params["cooling_parameters"]["cool_return_pipe_d__m"] # diameter of return pipe [m]
        self.cool_halo_inlet_len__m = self.params["cooling_parameters"]["cool_halo_inlet_len__m"] # length of halo inlet pipe [m]
        self.cool_halo_outlet_len__m = self.params["cooling_parameters"]["cool_halo_outlet_len__m"] # length of halo outlet pipe [m]
        self.cool_halo_pipe_d__m = self.params["cooling_parameters"]["cool_halo_pipe_d__m"] # diameter of halo inlet pipe [m]
        self.cool_halo_ring_d__m = self.params["cooling_parameters"]["cool_halo_ring_d__m"] # diameter of halo ring [m]
        self.cool_halo_tube_d__m = self.params["cooling_parameters"]["cool_halo_tube_d__m"] # diameter of halo tube [m]
        # cold displacement calcs
        self.engine_poisson_ratio = self.params["cooling_parameters"]["engine_poisson_ratio"] # oisson Ratio of the engine material
        self.engine_youngsmodulus__GPa = self.params["cooling_parameters"]["engine_youngsmodulus__GPa"] #  Young's Modulus of engine material [GPa]
        # thermal expansion
        self.thermal_expansion_coeff__per_degC = self.params["cooling_parameters"]["thermal_expansion_coeff__per_degC"] # thermal expansion coefficient of the engine [per_degC]
        
        self.run_unfired_displacement_calcs()
        self.analyse_sizing_for_cooling()
        #self.run_coolant_pressure_drop_calcs()
        
    def analyse_sizing_for_cooling(self):
        # use Cantera to find the combustion characteristics
        
        #cti_def = """ideal_gas(name='nasa', elements='C O H N',
        #          species='nasa:all',
        #          options=['skip_undeclared_elements'],
        #          reactions='all',
        #          initial_state=state(temperature=300, pressure=101325))"""
        
         
        """
        #gas = ct.Solution(source=cti_def)
        #carbon = ct.Solution('graphite.yaml')
        
        #gas.TPX = self.OF_t_inlet__K, self.Pc__Pa, f'{self.fuel}:{self.OF}, {self.oxidiser}:1'
        #gas.equilibrate("HP", solver='auto')
        
        #species = {s.name: s for s in ct.Species.listFromFile('nasa.cti')}
        #comb_species = [species[S] for S in (f"{self.fuel}", f"{self.oxidiser}")]
        
        #gas = ct.Solution(thermo="IdealGas", species=comb_species)
        
        #gas.set_equivalence_ratio(phi=1.0, fuel=f"{self.fuel}:1.5", oxidizer=f"{self.oxidiser}:1")
        #gas.set_mixture_fraction(1.0, fuel=f"{self.fuel}:1", oxidizer=f"{self.oxidiser}:1.5")
        
        #gas.TP = self.OF_t_inlet__K, self.Pc__Pa #, f'{self.fuel}:1, {self.oxidiser}:1.5'
        #gas.equilibrate("HP", solver='auto')
        
        o2 = ct.Solution("ipao2_react.yaml", "liquid_oxygen")
        
        ipa = ct.Solution("ipao2_react.yaml", "liquid_2propanol")

        species = {s.name: s for s in ct.Species.listFromFile('nasa_gas.yaml')}
        comb_species = [species[S] for S in (f"CO2", f"H2O", f"C3H8O,2propanol", f"O2")]
        
        #o2 = ct.Solution(thermo="IdealGas", species=[comb_species[3]])
        #ipa = ct.Solution(thermo="IdealGas", species=[comb_species[2]])
        #gas = ct.Solution(name='gas', thermo="IdealGas", species=comb_species[0:2])
        gas = ct.Solution('nasa_gas.yaml', 'gas')
        gas.TPY = 300, self.Pc__Pa, 'C3H8O,2propanol:1, O2:1.5'
        
        
        o2.TP = 90.17, self.Pc__Pa
        ipa.TP = 300, self.Pc__Pa
        
        molar_ratio = self.OF/(o2.mean_molecular_weight/ipa.mean_molecular_weight)
        moles_ox = molar_ratio/(1+molar_ratio)
        moles_f = 1-moles_ox
        o2()
        ipa()
        mix = ct.Mixture([(ipa, 1), (o2, 1.5), (gas, 0)])
        mix.equilibrate('HP')
        
        gas()
        gas.equilibrate("HP")
        gas()
        print(gas.T)
        
        
        o2.TP = 90.17, self.Pc__Pa
        ipa.TP = 300, self.Pc__Pa

        molar_ratio = self.OF/(o2.mean_molecular_weight/ipa.mean_molecular_weight)
        moles_ox = molar_ratio/(1+molar_ratio)
        moles_f = 1-moles_ox


        gas = ct.Solution(thermo="IdealGas", species=comb_species)

        mix = ct.Mixture([(ipa, moles_f), (o2, moles_ox), (gas, 0)])

        mix.equilibrate('HP')
        
        gas()
        
        print("CEA Chamber Temperature: ", self.Tc__K)
        
        
        Tc_cant__K = gas.T
        global s0_cant
        global h0_cant
        s0_cant = gas.s # Entropy - needed for isentropic expansion through nozzle
        h0__cant = gas.h # Stagnation enthalpy 
        gamma_c_cant = gas.cp/gas.cv # gamma at chamber
        print("!!!!!",gamma_c_cant)
        # Initial guess of throat static pressure (using chamber properties) - use perfect gas compressible flow relations
        pt_initial_guess = self.Pc__Pa * (1 + (gamma_c_cant - 1) / 2) ** (-gamma_c_cant / (gamma_c_cant - 1))
        def throat_error(pt):
            gas.SP = s0_cant, pt
            gamma = gas.cp/gas.cv
            R = gas.cp * (1-1/gamma)
            V = np.sqrt(2*(h0__cant-gas.h))
            error = V - np.sqrt(gamma*R*gas.T)
            return error
        pt_cant__Pa = scipy.optimize.fsolve(throat_error, x0=pt_initial_guess)
        pt_cant__Pa = float(pt_cant__Pa)
        cp_t_cant = gas.cp
        gamma_t_cant = gas.cp/gas.cv
        # Expand to exit conditions to calculate specific impulse
        gas.SP = s0_cant, self.pamb
        isp_cant__s = np.sqrt(2*(h0__cant-gas.h)) # definition of stagnation enthalpy
        mdot_cant__kg_s = self.F__N/isp_cant__s
        mdot_f_cant__kg_s = mdot_cant__kg_s/(self.OF+1)
        mdot_o_cant__kg_s = mdot_f_cant__kg_s * self.OF
        # use Bamboo to complete sizing
        perfect_gas_cant = bam.PerfectGas(gamma=gamma_t_cant, cp=cp_t_cant)
        chamber_conditions_cant = bam.ChamberConditions(self.Pc__Pa, self.Tc__K)
        At_cant__m2 = bam.isen.get_throat_area(perfect_gas=perfect_gas_cant,
                                               chamber_conditions=chamber_conditions_cant,
                                               mdot=mdot_cant__kg_s)
        Ae_cant__m2 = bam.isen.get_exit_area(perfect_gas=perfect_gas_cant,
                                             chamber_conditions=chamber_conditions_cant,
                                             p_e=self.pamb,
                                             mdot=mdot_cant__kg_s)
        Rt_cant__m = pow((At_cant__m2/np.pi),0.5)
        Re_cant__m = pow((Ae_cant__m2/np.pi),0.5)
        area_ratio = Ae_cant__m2/At_cant__m2
        Rc_cant__m = self.Rc__m # assume the same chamber radius
        Dc_cant__m = Rc_cant__m * 2
        Dt_cant__m = Rt_cant__m * 2
        Ac_cant__m = np.pi*pow(Rc_cant__m,2)
        L_star_cant__m = pow(self.Rc__m,2)*np.pi*(abs(self.xs__m[0])-abs(self.xs__m[1]))/At_cant__m2 # assume the same as our actual engine, L_star = Volume_c / At
        Vc_cant__m3 = L_star_cant__m * At_cant__m2
        xs_cant__m = [self.xs__m[0],self.xs__m[1],self.xs__m[2],self.xs__m[3]]
        rs_cant__m = [Rc_cant__m, Rc_cant__m, Rt_cant__m, Re_cant__m]
        engine_cant = bam.Engine(perfect_gas=perfect_gas_cant,
                                 chamber_conditions=chamber_conditions_cant,
                                 geometry=bam.Geometry(xs=xs_cant__m, rs=rs_cant__m))
        
        
        """
        # compare with Rafiki sizing and check cooling suitability
        #isp_cant_bam__s = engine_cant.isp(self.pamb)/9.80665
        
        perfect_gas_rafiki = bam.PerfectGas(gamma=self.gamma_t, molecular_weight=self.M__kg_per_kmol)
        chamber_conditions_rafiki = bam.ChamberConditions(self.Pc__Pa, self.Tc__K)
        geometry_rafiki = bam.Geometry(xs=self.xs__m, rs=self.rs__m)
        self.geometry = bam.Geometry(xs=self.xs__m, rs=self.rs__m)
        engine_rafiki = bam.Engine(perfect_gas=perfect_gas_rafiki,
                            chamber_conditions=chamber_conditions_rafiki,
                            geometry=self.geometry)
        isp_rafiki_bam__s = engine_rafiki.isp(self.pamb)/9.80665
       
       
        #print("Cantera ISP:     ", isp_cant__s)
        #print("Cantera-bam ISP: ", isp_cant_bam__s)
        print("Rafiki-bam ISP:  ", isp_rafiki_bam__s)
        print("Rafiki ISP:      ", self.isp__s)
    
    def run_coolant_pressure_drop_calcs(self):
        """
        Pressure drop assumptions:
        - Inlet and outlet distribution rings are pipes curved along a half-circular arc of the
          same radius as the inner chamber diameter + the wall thickness.
        - The coolant takes a 90 degree turn into the cooling channels, resulting in
          a K-value of 1.3 (see config for reference).
        - The same number of delivery and return pipes as number of inlet and outlet
          pipe.
        """        
        # build the pressure drop circuit
        self.pressure_circuit = PressureDropCircuit(self.REDH_LAMINAR, self.REDH_TURBULENT)
        # delivery pipe
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_delivery_d__m/2,
                                                      n_pipes=1,
                                                      len__m=self.cool_delivery_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Delivery pipe")
        # halo inlet pipe 
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_halo_pipe_d__m/2,
                                                      n_pipes=1,
                                                      len__m=self.cool_halo_inlet_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Halo inlet pipe")
                                          
        # halo distribution ring
        self.pressure_circuit.add_circular_pipe_circular(r__m=self.cool_halo_ring_d__m/2,
                                                         rp__m=self.cool_halo_tube_d__m/2,
                                                         percentage_travelled=0.5,
                                                         mdot__kg_s=self.cool_mdot__kg_per_s,
                                                         rho__kg_m3=self.cool_rho__kg_m3,
                                                         mu__Pas=self.cool_mu__Pas,
                                                         n=1,
                                                         label="Halo distribution inlet")
        
        # halo turn into cooling jacket inlet
        self.pressure_circuit.add_90deg_turn_circular(r__m=self.cool_inlet_pipe_d__m/2,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      n=3,
                                                      label="Halo turn into jacket inlet")
        
        # inlet pipe
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_inlet_pipe_d__m/2,
                                                      n_pipes=4,
                                                      len__m=self.cool_inlet_pipe_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Inlet pipe")

        # inlet distribution ring
        self.pressure_circuit.add_circular_pipe_rectangular_box(r__m=self.rs__m[0]+self.wall_thickness__m,
                                                                w__m=self.cool_inlet_ring_w__m,
                                                                h__m=self.cool_inlet_ring_h__m,
                                                                percentage_travelled=0.125,
                                                                mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                                rho__kg_m3=self.cool_rho__kg_m3,
                                                                mu__Pas=self.cool_mu__Pas,
                                                                n=4,
                                                                label="Inlet distribution")
        # turn into the cooling channels
        self.pressure_circuit.add_90deg_turn_annulus(r_inner__m=self.rs__m[0]+self.wall_thickness__m,
                                                     r_outer__m=self.cool_inlet_ring_r__m,
                                                     mdot__kg_s=self.cool_mdot__kg_per_s,
                                                     rho__kg_m3=self.cool_rho__kg_m3,
                                                     label="90 deg turn into channels")
        # area change into cooling channels
        A_in__m2 = np.pi*(pow(self.cool_inlet_ring_r__m,2)-pow(self.rs__m[0]+self.wall_thickness__m,2))
        A_out__m2 = self.channel_height__m*self.channel_width__m*self.n_channels
        Dh_in__m = (self.cool_inlet_ring_r__m*2)-((self.rs__m[0]+self.wall_thickness__m)*2)
        self.pressure_circuit.add_square_area_reduction(A_in__m2=A_in__m2,
                                                        A_out__m2=A_out__m2,
                                                        Dh_in__m=Dh_in__m,
                                                        mdot__kg_s=self.cool_mdot__kg_per_s,
                                                        rho__kg_m3=self.cool_rho__kg_m3,
                                                        mu__Pas=self.cool_mu__Pas,
                                                        label="Area change into channels")
        # cooling jacket
        #self.pressure_circuit.add_straight_pipes_rectangular_box(w__m=self.channel_width__m,
        #                                                         h__m=self.channel_height__m,
        #                                                         n_pipes=self.n_channels,
        #                                                         len__m=abs(self.xs__m[0]) + abs(self.xs__m[-1]),
        #                                                         mdot__kg_s=self.cool_mdot__kg_per_s,
        #                                                         rho__kg_m3=self.cool_rho__kg_m3,
        #                                                         mu__Pas=self.cool_mu__Pas,
        #                                                         label="Channels friction")
        self.pressure_circuit.add_manual_pressure_drop(abs(self.cooling_data["p_coolant"][-1]-self.cooling_data["p_coolant"][0]), label="Channels friction")
        
        
        # area change out of cooling channels
        A_in__m2 = self.channel_height__m*self.channel_width__m*self.n_channels
        A_out__m2 = np.pi*(pow(self.cool_outlet_ring_r__m,2)-pow(self.rs__m[-1]+self.wall_thickness__m,2))
        Dh_in__m = ((2*self.channel_height__m*self.channel_width__m)/(self.channel_height__m+self.channel_width__m))*self.n_channels
        self.pressure_circuit.add_square_area_expansion(A_in__m2=A_in__m2,
                                                        A_out__m2=A_out__m2,
                                                        Dh_in__m=Dh_in__m,
                                                        mdot__kg_s=self.cool_mdot__kg_per_s,
                                                        rho__kg_m3=self.cool_rho__kg_m3,
                                                        mu__Pas=self.cool_mu__Pas,
                                                        label="Area change out of channels")
        # turn out of the cooling channels
        self.pressure_circuit.add_90deg_turn_annulus(r_inner__m=self.rs__m[-1]+self.wall_thickness__m,
                                                     r_outer__m=self.cool_outlet_ring_r__m,
                                                     mdot__kg_s=self.cool_mdot__kg_per_s,
                                                     rho__kg_m3=self.cool_rho__kg_m3,
                                                     label="90 deg turn out of channels")
        # outlet distribution ring
        self.pressure_circuit.add_circular_pipe_rectangular_box(r__m=self.rs__m[-1]+self.wall_thickness__m,
                                                                w__m=self.cool_outlet_ring_w__m,
                                                                h__m=self.cool_outlet_ring_h__m,
                                                                percentage_travelled=0.125,
                                                                mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                                rho__kg_m3=self.cool_rho__kg_m3,
                                                                mu__Pas=self.cool_mu__Pas,
                                                                n=4,
                                                                label="Oulet distribution")
        
        # outlet pipe
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_outlet_pipe_d__m/2,
                                                      n_pipes=self.cool_outlet_pipe_n,
                                                      len__m=self.cool_outlet_pipe_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Outlet pipe")
        
        # cooling jacket outlet turn into halo
        self.pressure_circuit.add_90deg_turn_circular(r__m=self.cool_outlet_pipe_d__m/2,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s/4,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      n=3,
                                                      label="Jacket outlet into halo")
                                                      
        # halo distribution ring
        self.pressure_circuit.add_circular_pipe_circular(r__m=self.cool_halo_ring_d__m/2,
                                                         rp__m=self.cool_halo_tube_d__m/2,
                                                         percentage_travelled=0.5,
                                                         mdot__kg_s=self.cool_mdot__kg_per_s,
                                                         rho__kg_m3=self.cool_rho__kg_m3,
                                                         mu__Pas=self.cool_mu__Pas,
                                                         n=1,
                                                         label="Halo distribution outlet")
                                                         
        # halo outlet pipe 
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_halo_pipe_d__m/2,
                                                      n_pipes=1,
                                                      len__m=self.cool_halo_outlet_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Halo outlet pipe")
        
        # return pipe
        self.pressure_circuit.add_straight_pipes_circ(r__m=self.cool_return_d__m/2,
                                                      n_pipes=1,
                                                      len__m=self.cool_return_len__m,
                                                      mdot__kg_s=self.cool_mdot__kg_per_s,
                                                      rho__kg_m3=self.cool_rho__kg_m3,
                                                      mu__Pas=self.cool_mu__Pas,
                                                      label="Return pipe")
        # into bucket
        self.pressure_circuit.add_orifice(r__m=self.cool_return_d__m/2,
                                          n_ori=1,
                                          CD=self.cool_CD,
                                          mdot__kg_s=self.cool_mdot__kg_per_s,
                                          rho__kg_m3=self.cool_rho__kg_m3,
                                          label="Into bucket")
        # complete pressure drop calcs
        self.pressure_circuit.calc_total_pressure_drop()
        # plot pressure drop across across the cooling system
        self.pressure_circuit.plot_pressure_drop()

    def run_unfired_displacement_calcs(self):
        """ Find the radial displacement of the chamber, throat and nozzle
            in worst case scenario where the coolant is running through the
            channels with no pressure being generated in the engine due to
            combustion.
        """
        # initialise list to store displacement results
        dis_toby__mm = []
        dis_joey_thin_open__mm = [] # https://structx.com/Stress_Strain_004.html
        dis_joey_thin_closed__mm = [] # https://structx.com/Stress_Strain_004.html
        dis_joey_thick__mm = [] # https://structx.com/Stress_Strain_004.html
        # fetch params
        youngsmodulus__GPa = self.engine_youngsmodulus__GPa
        poisson_ratio = self.engine_poisson_ratio
        tube_d__mm = [i*2000 for i in self.rs__m]
        tube_t__mm = self.wall_thickness__m * 1000
        # find the maximum pressure differential
        max_P__bar = -((self.cool_in_p__Pa*1e-5) - 1.013)
        max_P__MPa = max_P__bar * 0.1
        # calculate the tube strain matrix
        # TODO: CHECK THIS MULTIPLIER ON youngsmodulus__GPa
        poisson_coeff = (youngsmodulus__GPa*1000)/((1+poisson_ratio)*(1-(2*poisson_ratio)))
        poisson_mat = np.diag([1-poisson_ratio, 1-poisson_ratio, 1-poisson_ratio, (1-(2*poisson_ratio))/2])
        for i in range(len(tube_d__mm)):
            stress_mat__bar = np.matrix([[-1*max_P__MPa],
                                         [max_P__MPa*tube_d__mm[i]/(2*tube_t__mm)],
                                         [max_P__MPa*tube_d__mm[i]/(4*tube_t__mm)],
                                         [0]])
            stress_mat__MPa = stress_mat__bar # * 0.1
            strain_mat__m = (np.linalg.inv(poisson_mat)*stress_mat__MPa)/poisson_coeff
            strain_mat__mm = strain_mat__m * 1000
            dis_toby__mm.append(strain_mat__mm.item(1))
        # Joey methods
        for i in range(len(tube_d__mm)):
            P__MPa = max_P__MPa #max_P__bar * 0.1
            youngsmodulus__MPa = youngsmodulus__GPa * 1e3
            disp__mm = (P__MPa*pow(self.rs__m[i]*1e3,2))/(youngsmodulus__MPa*tube_t__mm)
            dis_joey_thin_open__mm.append(disp__mm)
            disp__mm = ((P__MPa*pow(self.rs__m[i]*1e3,2))/(youngsmodulus__MPa*tube_t__mm))*(1-poisson_ratio/2)
            dis_joey_thin_closed__mm.append(disp__mm)
            P_e__MPa = self.cool_in_p__Pa*1e-6
            P_i__MPa = 1.013 * 0.1
            r_i__mm = self.rs__m[i]*1e3
            r_o__mm = r_i__mm + (self.wall_thickness__m * 1000)
            coeff1 = ((1-poisson_ratio)/youngsmodulus__MPa)
            coeff2 = ((1+poisson_ratio)/youngsmodulus__MPa)
            term1 = ((P_i__MPa*pow(r_i__mm,2) - P_e__MPa*pow(r_o__mm,2))*r_i__mm)/(pow(r_o__mm,2)-pow(r_i__mm,2))
            term2 = ((P_i__MPa-P_e__MPa)*pow(r_i__mm,2)*pow(r_o__mm,2))/((pow(r_o__mm,2)-pow(r_i__mm,2))*r_i__mm)
            disp__mm = (coeff1*term1)+(coeff2*term2)
            dis_joey_thick__mm.append(disp__mm)
        
        plt.plot(np.array(self.xs__m)*1000, dis_toby__mm, label="Toby's Method")
        plt.plot(np.array(self.xs__m)*1000, dis_joey_thin_open__mm, label="Thin-Walled Open Ended")
        plt.plot(np.array(self.xs__m)*1000, dis_joey_thin_closed__mm, label="Thin-Walled Closed Ended")
        plt.plot(np.array(self.xs__m)*1000, dis_joey_thick__mm, label="Thick-Walled Internal and External Pressure")
        plt.title("Raidal Displacement of the Engine Before Hotfire")
        plt.legend()
        plt.xlabel("x position [mm]")
        plt.ylabel("Radial Displacement [mm]")
        plt.show()
            
        
        

    def run_cooling_calcs(self):
        # set up engine object
        self.perfect_gas = bam.PerfectGas(gamma=self.gamma_t, molecular_weight=self.M__kg_per_kmol)
        self.chamber_conditions = bam.ChamberConditions(self.Pc__Pa, self.Tc__K)
        
        self.geometry = bam.Geometry(xs=self.xs__m, rs=self.rs__m)
        self.engine = bam.Engine(perfect_gas=self.perfect_gas,
                                 chamber_conditions=self.chamber_conditions,
                                 geometry=self.geometry,
                                 exhaust_convection="bartz-sigma",
                                 coolant_convection="gnielinski")
        # set up wall(s)
        # High conductivity copper
        self.copper = bam.Material(E = 109e9, poisson = 0.34, alpha = 17.9e-6, k = 380.0)
        self.stainless_steel = bam.Material(E = 193e9, poisson = 0.29, alpha = 16e-6, k = 14.0)
        self.wall = bam.Wall(material=self.copper, thickness=self.wall_thickness__m)
        self.engine.walls=self.wall
        # set up transport properties
        def Pr_coolant(T, p):
            return PropsSI("PRANDTL", "T", T, "P", p, "WATER")
        def mu_coolant(T, p):
            return PropsSI("VISCOSITY", "T", T, "P", p, "WATER")
        def k_coolant(T, p):
            return PropsSI("CONDUCTIVITY", "T", T, "P", p, "WATER")
        def cp_coolant(T, p):
            return PropsSI("CPMASS", "T", T, "P", p, "WATER")
        def rho_coolant(T, p):
            return PropsSI("DMASS", "T", T, "P", p, "WATER")
        self.coolant_transport = bam.TransportProperties(Pr = Pr_coolant,
                                                         mu = mu_coolant,
                                                         k = k_coolant,
                                                         cp = cp_coolant,
                                                         rho = rho_coolant)

        self.exhaust_transport = bam.TransportProperties(Pr=self.Pr_exhaust,
                                                     mu=self.mu_exhaust,
                                                     k=self.k_exhaust)
                                                     
        # add exhaust transport properties to engine
        self.engine.exhaust_transport = self.exhaust_transport

        # blockage ratio function
        def blockageRatio(x):
            r = np.interp(x, self.xs__m, self.rs__m)
            r_inner__m = r + self.wall_thickness__m
            r_outer__m = r_inner__m + self.channel_height__m

            chamber_w__m = 0

            if x <= self.xs__m[1]:
                chamber_w__m = self.channel_width_chamber__m
            else:
                chamber_w__m = self.channel_width__m

            alpha_inner__rad = math.acos((2*pow(r_inner__m,2)-pow(chamber_w__m,2))/(2*pow(r_inner__m,2)))
            alpha_outer__rad = math.acos((2*pow(r_outer__m,2)-pow(chamber_w__m,2))/(2*pow(r_outer__m,2)))
            total_area = (pow(r_outer__m,2)*math.pi) - (pow(r_inner__m,2)*math.pi)
            
            box_channel_area__m2 = self.channel_height__m * chamber_w__m
            segment_channel_area__m2 = 0.5*(alpha_outer__rad - math.sin(alpha_outer__rad)) * pow(r_outer__m,2)
            total_actual_channel_area__m2 = (box_channel_area__m2 + segment_channel_area__m2) * self.n_channels
            #total_actual_channel_area__m2 = box_channel_area__m2 * self.n_channels
            blockage_ratio = (total_area - total_actual_channel_area__m2)/total_area
            return blockage_ratio
        
        def A_coolant(x, blockage_ratio):
            """Flow area of the coolant at an axial position.
            Args:
                x (float): Axial position x (m)
            Returns:
                float: Coolant flow area (m2)
            """

            #R_in = r(x) + total_wall_thickness(x)
            #R_out = R_in + channel_height(x)
            #flow_area_unblocked = np.pi * (R_out**2 - R_in**2)
            
            r = np.interp(x, self.xs__m, self.rs__m)
            R_in = r + self.wall_thickness__m
            R_out = R_in + self.channel_height__m
            flow_area_unblocked = np.pi * (R_out**2 - R_in**2)
            
            return flow_area_unblocked * (1 - blockage_ratio)
        print(self.xs__m)
        print(self.rs__m)
        x_test = np.linspace(self.xs__m[0], self.xs__m[3], 1000)
        y_test = np.zeros(x_test.size)
        y_test_area = np.zeros(x_test.size)
        for i in range(y_test.size):
            y_test[i] = blockageRatio(x_test[i])
            y_test_area[i] = A_coolant(x_test[i],y_test[i]) 
        fig1 = plt.figure("func_test")
        plt.plot(x_test, y_test)
        plt.show()
        fig2 = plt.figure("func_test2")
        plt.plot(x_test, y_test_area)
        plt.title("Leeds Flow Area with Corrected Radius No Segement")
        plt.xlabel("x position [m]")
        plt.ylabel("Flow Areaw [m2]")
        #plt.ylim([0.00023, 0.00025])
        plt.show()
            
        # add cooling jacket to engine
        self.engine.cooling_jacket = bam.CoolingJacket(T_coolant_in=self.cool_in_t__T,
                                                       p_coolant_in=self.cool_in_p__Pa,
                                                       mdot_coolant=self.cool_mdot__kg_per_s,
                                                       channel_height=self.channel_height__m,
                                                       blockage_ratio=blockageRatio,
                                                       number_of_channels=self.number_of_channels,
                                                       coolant_transport=self.coolant_transport,
                                                       channel_width = self.channel_width__m,
                                                       configuration='vertical')
        # Run analysis (default is counter flow)
        self.cooling_data = self.engine.steady_heating_analysis(iter_each=5)
        #fig = plt.figure(1)
        #plt.plot(self.cooling_data['x'], self.cooling_data["Dh_coolant"])
        #plt.show()
        #print(self.cooling_data["Dh_coolant"])
        
    def plot_data(self):
        self.engine.plot()
        #bam.show()
        bam.plot.plot_temperatures(self.cooling_data, only_indexes = [0, 1, 2]) #, only_indexes = [0, 1, 2]
        #bam.show()
        bam.plot.plot_coolant_velocity(self.cooling_data)
        #bam.show()
        bam.plot.plot_p_coolant(self.cooling_data)
        #bam.show()
        bam.plot.plot_q_per_area(self.cooling_data)
        #bam.show()
        bam.plot.plot_tangential_stress(self.cooling_data, wall_index = 0)
        #bam.show()
        bam.plot.plot_thermal_resistances(self.cooling_data)
        #bam.show()
        bam.plot.plot_coolant_h(self.cooling_data)
        bam.show()
    
    def run_thermal_expansion_calcs(self):
        T_init__K = 300
        T_data__K = np.array(self.cooling_data["T"])[:, 2]
        x_iter__m = self.cooling_data["x"].copy()
        dx__m = abs(self.cooling_data["x"][1] - self.cooling_data["x"][0])
        coeff__per_degC = self.thermal_expansion_coeff__per_degC
        radial_thermal_expansion__mm = []
        longditudinal_thermal_expansion__mm = 0
        longditudinal_thermal_expansion_list__mm = []
        for i in range(len(T_data__K)):
            # radial thermal expansion
            r0__m = np.interp(x_iter__m[i], self.xs__m, self.rs__m)
            dr__m = r0__m * coeff__per_degC * (T_data__K[i] - T_init__K) # https://physicstasks.eu/1809/diameter-increase-of-cylinder-when-being-heated
            radial_thermal_expansion__mm.append(dr__m*1000)
            # longitudinal thermal expansion
            longditudinal_thermal_expansion__mm += (dx__m*coeff__per_degC*(T_data__K[i]-T_init__K))*1000
            longditudinal_thermal_expansion_list__mm.append(longditudinal_thermal_expansion__mm)
        # print accumalitive longitudinal thermal expansion
        print(f"Accumalitive longitudinal thermal expansion of engine: {longditudinal_thermal_expansion__mm} mm")
        # plot radial thermal expansion
        plt.plot(np.array(x_iter__m)*1000, radial_thermal_expansion__mm)
        #plt.plot(np.array(x_iter__m)*1000, longditudinal_thermal_expansion_list__mm)
        plt.title("Radial Thermal Expansion of Engine")
        plt.xlabel("x position [mm]")
        plt.ylabel("Thermal Expansion [mm]")
        plt.show()
      
    def load_YAML(self, yaml_filename):
        with open(yaml_filename) as cfg_file:
            params = yaml.load(cfg_file, Loader=yaml.FullLoader)
        return params

    def print_logo(self):
        print("\n██╗   ██╗███████╗████████╗██╗\n╚██╗ ██╔╝██╔════╝╚══██╔══╝██║\n ╚████╔╝ █████╗     ██║   ██║\n  ╚██╔╝  ██╔══╝     ██║   ██║\n   ██║   ███████╗   ██║   ██║\n   ╚═╝   ╚══════╝   ╚═╝   ╚═╝\n")
        
    def print_monkey(self):
        print('\n            ."`".\n        .-./ _=_ \.-.\n       {  (,(oYo),) }}\n       {{ |   "   |} }\n       { { \(---)/  }}\n       {{  }"-=-"{ } }\n       { { }._:_.{  }}\n       {{  } -:- { } }\n       {{  } -:- { } }\n       {_{ }`===`{  _}\n      ((((\)     (/))))')
        
        
        
        

#██╗   ██╗███████╗████████╗██╗
#╚██╗ ██╔╝██╔════╝╚══██╔══╝██║
# ╚████╔╝ █████╗     ██║   ██║
#  ╚██╔╝  ██╔══╝     ██║   ██║
#   ██║   ███████╗   ██║   ██║
#   ╚═╝   ╚══════╝   ╚═╝   ╚═╝
                             

